import sys
import pyautogui
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel, QLineEdit, QCheckBox
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtGui import QKeySequence

class AutoClicker(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.timer = QTimer()
        self.timer.timeout.connect(self.click_mouse)
        self.interval = 1000
        self.repeat = 1
        self.recording = False
        self.macro = []

    def initUI(self):
        self.setWindowTitle('Автокликер')

        layout = QVBoxLayout()

        self.start_button = QPushButton('Начать кликать (F2)')
        self.start_button.clicked.connect(self.start_clicking)
        layout.addWidget(self.start_button)

        self.stop_button = QPushButton('Остановить кликать')
        self.stop_button.clicked.connect(self.stop_clicking)
        layout.addWidget(self.stop_button)

        self.interval_label = QLabel('Интервал (мс):')
        layout.addWidget(self.interval_label)

        self.interval_input = QLineEdit('1000')
        layout.addWidget(self.interval_input)

        self.repeat_label = QLabel('Повторить:')
        layout.addWidget(self.repeat_label)

        self.repeat_input = QLineEdit('1')
        layout.addWidget(self.repeat_input)

        self.record_button = QPushButton('Записать макрос')
        self.record_button.clicked.connect(self.start_recording)
        layout.addWidget(self.record_button)

        self.stop_record_button = QPushButton('Остановить запись макроса')
        self.stop_record_button.clicked.connect(self.stop_recording)
        layout.addWidget(self.stop_record_button)

        self.play_button = QPushButton('Воспроизвести макрос')
        self.play_button.clicked.connect(self.play_macro)
        layout.addWidget(self.play_button)

        self.log_checkbox = QCheckBox('Включить логирование')
        layout.addWidget(self.log_checkbox)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.show()

    def start_clicking(self):
        self.interval = int(self.interval_input.text())
        self.repeat = int(self.repeat_input.text())
        self.timer.start(self.interval)

    def stop_clicking(self):
        self.timer.stop()

    def click_mouse(self):
        for _ in range(self.repeat):
            pyautogui.click()
            if self.log_checkbox.isChecked():
                print(f'Кликнуто на {pyautogui.position()}')

    def start_recording(self):
        self.recording = True
        self.macro = []
        print('Начата запись макроса. Нажмите "s" для завершения записи.')

    def stop_recording(self):
        self.recording = False
        print('Запись макроса завершена.')

    def play_macro(self):
        if not self.macro:
            print('Макрос не записан.')
            return

        for action in self.macro:
            if action['type'] == 'click':
                pyautogui.click(action['position'])
            elif action['type'] == 'key':
                pyautogui.press(action['key'])
            if self.log_checkbox.isChecked():
                print(f"Выполнено действие: {action}")

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_F2:
            self.start_clicking()
        elif self.recording:
            if event.key() == Qt.Key_S:
                self.stop_recording()
            else:
                key = QKeySequence(event.key()).toString()
                self.macro.append({'type': 'key', 'key': key})
                if self.log_checkbox.isChecked():
                    print(f"Записана клавиша: {key}")
        else:
            super().keyPressEvent(event)

    def mousePressEvent(self, event):
        if self.recording:
            if event.button() == Qt.LeftButton:
                position = pyautogui.position()
                self.macro.append({'type': 'click', 'position': position})
                if self.log_checkbox.isChecked():
                    print(f"Записан клик на: {position}")
        else:
            super().mousePressEvent(event)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = AutoClicker()
    sys.exit(app.exec_())
